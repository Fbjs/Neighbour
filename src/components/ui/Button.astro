---
import { Icon } from 'astro-icon/components';
import { twMerge } from 'tailwind-merge';
import type { CallToAction as Props } from '~/types';

const {
  variant = 'secondary',
  target,
  text = Astro.slots.render('default') || 'Click aquí',
  icon = '',
  class: className = '',
  type,
  phone = '',
  message = 'Hola, me gustaría obtener más información.',
  ...rest
} = Astro.props;

// Definimos las variantes de botones
const variants = {
  primary: 'btn-primary',
  secondary: 'btn-secondary',
  tertiary: 'btn btn-tertiary',
  link: 'cursor-pointer hover:text-primary',
  whatsapp: 'flex items-center justify-center bg-[#25D366] text-white px-4 py-3 rounded-lg transition duration-300 hover:bg-[#20B357] shadow-lg',
};

// Construimos el enlace de WhatsApp solo si el número está presente
const whatsappUrl = phone ? `https://wa.me/${phone}?text=${encodeURIComponent(message)}` : '';
---

{
  type === 'button' || type === 'submit' || type === 'reset' ? (
    // Botón normal
    <button type={type} class={twMerge(variants[variant] || '', className)} {...rest}>
      <Fragment set:html={text} />
      {icon && <Icon name={icon} class="w-5 h-5 ml-1 -mr-1.5 rtl:mr-1 rtl:-ml-1.5 inline-block" />}
    </button>
  ) : variant === 'whatsapp' && phone ? (
    // Botón de WhatsApp (solo si `phone` tiene un valor)
  <a
    href={whatsappUrl}
    target="_blank"
    rel="noopener noreferrer"
    class={twMerge(variants[variant] || '', className, 'flex items-center gap-2')}
    {...rest}
  >
    <Icon name="tabler:brand-whatsapp" class="w-5 h-5 mr-1" /> {text}
  </a>

  ) : (
    // Botón normal como enlace
    <a
      class={twMerge(variants[variant] || '', className)}
      {...(target ? { target: target, rel: 'noopener noreferrer' } : {})}
      {...rest}
    >
      <Fragment set:html={text} />
      {icon && <Icon name={icon} class="w-5 h-5 ml-1 -mr-1.5 rtl:mr-1 rtl:-ml-1.5 inline-block" />}
    </a>
  )
}
