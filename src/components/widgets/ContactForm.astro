---
import type { Form as Props } from '~/types';
import Button from '~/components/ui/Button.astro';

const { inputs, textarea, disclaimer, button = 'Enviar', description = '' , asunto} = Astro.props;
---

<!-- Botón(es) que abren el modal -->


<!-- Modal -->
<div id="contact-modal" class="hidden fixed z-50 inset-0 overflow-y-auto transition-opacity duration-500 ease-out">
  <!-- Fondo oscuro semi-transparente con animación -->
  <div id="modal-bg" class="fixed inset-0 bg-slate-900 bg-opacity-0 transition-opacity duration-500 ease-out"></div>

  <!-- Contenido del modal con animaciones mejoradas -->
  <div class="flex items-center justify-center min-h-screen">
    <div id="modal-content" class="bg-white dark:bg-slate-900 rounded-lg overflow-hidden shadow-2xl transform scale-90 opacity-0 translate-y-10 transition-all duration-500 ease-out max-w-md w-full">
      <div class="px-6 py-4">
        <div class="text-center sm:text-left">
          <h3 class="text-lg leading-6 font-bold text-gray-900 dark:text-white">
            Formulario de Contacto
          </h3>
          <p class="mt-2 text-sm text-gray-500 dark:text-gray-300">
            Rellene el siguiente formulario para enviarnos un mensaje.
          </p>
        </div>

        <form action="https://api.web3forms.com/submit" method="POST" class="mt-4 text-left">
          <input type="hidden" name="access_key" value="be189844-e76c-45c7-b324-032897ee8890" />

          <!-- Inputs dinámicos -->
          {inputs &&
            inputs.map(({ type = 'text', name, label = '', autocomplete = 'on', placeholder = '' }) =>
              name && (
                <div class="mb-6">
                  {label && (
                    <label for={name} class="block text-sm font-medium text-gray-700 dark:text-gray-300">
                      {label}
                    </label>
                  )}
                  <input
                    type={type}
                    name={name}
                    id={name}
                    autocomplete={autocomplete}
                    placeholder={placeholder}
                    class="py-3 px-4 block w-full text-md rounded-lg border border-gray-300 dark:border-gray-700 bg-white dark:bg-slate-800 focus:outline-none focus:ring-2 focus:ring-indigo-500"
                    required
                  />
                </div>
              )
            )}

          <!-- Textarea -->
          {textarea && (
            <div class="mb-4">
              <label for="textarea" class="block text-sm font-medium text-gray-700 dark:text-gray-300">
                {textarea.label}
              </label>
              <textarea
                id="textarea"
                name={textarea.name || 'message'}
                rows={textarea.rows || 4}
                placeholder={textarea.placeholder}
                class="py-2 px-3 mt-1 block w-full text-md rounded-lg border border-gray-300 dark:border-gray-700 bg-white dark:bg-slate-800 focus:outline-none focus:ring-2 focus:ring-indigo-500"
                required
              />
            </div>
          )}

          <!-- Botones -->
          <div class="flex items-center justify-end space-x-3">
            <Button variant="whatsapp" type="submit">
              {button}
            </Button>
            <button
              type="button"
              class="close-modal-btn rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white dark:bg-slate-800 text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-slate-700"
            >
              Cerrar
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>
</div>

<!-- Script para animaciones -->
<script>
document.addEventListener('DOMContentLoaded', function () {
  const modal = document.getElementById('contact-modal');
  const modalBg = document.getElementById('modal-bg');
  const modalContent = document.getElementById('modal-content');

  const openModalBtns = document.querySelectorAll('.open-modal-btn');
  const closeModalBtns = document.querySelectorAll('.close-modal-btn');

  function openModal() {
    if (!modal || !modalBg || !modalContent) return; // Evita errores si los elementos no existen

    modal.classList.remove('hidden');

    setTimeout(() => {
      modalBg.classList.replace('bg-opacity-0', 'bg-opacity-80'); // Aumenta opacidad del fondo
      modalContent.classList.replace('opacity-0', 'opacity-100');
      modalContent.classList.replace('scale-90', 'scale-105'); // Hace un ligero rebote
      modalContent.classList.replace('translate-y-10', 'translate-y-0');

      setTimeout(() => {
        modalContent.classList.replace('scale-105', 'scale-100'); // Se ajusta al tamaño final
      }, 150);
    }, 10);
  }

  function closeModal() {
    if (!modal || !modalBg || !modalContent) return;

    modalBg.classList.replace('bg-opacity-80', 'bg-opacity-0'); // Reduce opacidad del fondo
    modalContent.classList.replace('opacity-100', 'opacity-0');
    modalContent.classList.replace('scale-100', 'scale-90'); // Reduce tamaño para desaparecer
    modalContent.classList.replace('translate-y-0', 'translate-y-20'); // Se desplaza hacia abajo

    setTimeout(() => {
      modal.classList.add('hidden');
      modalContent.classList.replace('translate-y-20', 'translate-y-10'); // Reseteo para la próxima apertura
    }, 400);
  }

  // Abrir modal con cada botón asignado
  openModalBtns.forEach(btn => btn.addEventListener('click', openModal));

  // Cerrar modal con botones de cierre
  closeModalBtns.forEach(btn => btn.addEventListener('click', closeModal));

  // Cerrar modal al hacer clic fuera del contenido
  modalBg?.addEventListener('click', closeModal);
});

</script>

